/**
 * Image Optimization Script –¥–ª—è Diwave
 *
 * –ö–æ–Ω–≤–µ—Ä—Ç—É—î –≤–µ–ª–∏–∫—ñ PNG/JPG –≤ AVIF —Ç–∞ WebP —Ñ–æ—Ä–º–∞—Ç–∏
 * –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∞–π—Ç—É.
 *
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
 *   npm install --save-dev sharp
 *   node scripts/optimize-images.js
 */

const sharp = require('sharp');
const fs = require('fs');
const path = require('path');
const { promisify } = require('util');

const readdir = promisify(fs.readdir);
const stat = promisify(fs.stat);

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —è–∫–æ—Å—Ç—ñ
const QUALITY_SETTINGS = {
  avif: 80,  // –ù–∞–π–∫—Ä–∞—â–µ —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è
  webp: 85,  // –î–ª—è —Å—Ç–∞—Ä—ñ—à–∏—Ö –±—Ä–∞—É–∑–µ—Ä—ñ–≤
  jpeg: 85   // –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ JPG –≤–µ—Ä—Å—ñ—è
};

// –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó (KB)
const MIN_SIZE_KB = 100;

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
let stats = {
  total: 0,
  optimized: 0,
  skipped: 0,
  errors: 0,
  savedBytes: 0
};

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
 */
async function findImages(dir, fileList = []) {
  const files = await readdir(dir);

  for (const file of files) {
    const filePath = path.join(dir, file);
    const fileStat = await stat(filePath);

    if (fileStat.isDirectory()) {
      await findImages(filePath, fileList);
    } else if (/\.(png|jpe?g)$/i.test(file)) {
      fileList.push(filePath);
    }
  }

  return fileList;
}

/**
 * –û–ø—Ç–∏–º—ñ–∑—É—î –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 */
async function optimizeImage(imagePath) {
  const fileStat = await stat(imagePath);
  const sizeKB = fileStat.size / 1024;

  // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –º–∞–ª–µ–Ω—å–∫—ñ —Ñ–∞–π–ª–∏
  if (sizeKB < MIN_SIZE_KB) {
    console.log(`‚è≠Ô∏è  Skipped (${Math.round(sizeKB)}KB): ${path.basename(imagePath)}`);
    stats.skipped++;
    return;
  }

  const ext = path.extname(imagePath);
  const base = imagePath.slice(0, -ext.length);

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –≤–µ—Ä—Å—ñ—ó
    const avifExists = fs.existsSync(`${base}.avif`);
    const webpExists = fs.existsSync(`${base}.webp`);

    if (avifExists && webpExists) {
      console.log(`‚úì  Already optimized: ${path.basename(imagePath)}`);
      stats.skipped++;
      return;
    }

    const image = sharp(imagePath);
    const metadata = await image.metadata();

    // –ì–µ–Ω–µ—Ä—É—î–º–æ AVIF (–Ω–∞–π—Å—É—á–∞—Å–Ω—ñ—à–∏–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–π–∫—Ä–∞—â–µ —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è)
    if (!avifExists) {
      await image
        .avif({ quality: QUALITY_SETTINGS.avif, effort: 6 })
        .toFile(`${base}.avif`);
    }

    // –ì–µ–Ω–µ—Ä—É—î–º–æ WebP (–¥–ª—è –±—ñ–ª—å—à–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
    if (!webpExists) {
      await image
        .webp({ quality: QUALITY_SETTINGS.webp, effort: 6 })
        .toFile(`${base}.webp`);
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const avifStat = await stat(`${base}.avif`);
    const webpStat = await stat(`${base}.webp`);

    const originalSize = fileStat.size;
    const newSize = Math.min(avifStat.size, webpStat.size);
    const saved = originalSize - newSize;
    const savedPercent = ((saved / originalSize) * 100).toFixed(1);

    stats.optimized++;
    stats.savedBytes += saved;

    console.log(
      `‚úÖ ${path.basename(imagePath)} (${Math.round(sizeKB)}KB ‚Üí ${Math.round(newSize / 1024)}KB, -${savedPercent}%)`
    );
  } catch (err) {
    console.error(`‚ùå Error processing ${imagePath}:`, err.message);
    stats.errors++;
  }
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
 */
async function main() {
  console.log('üöÄ Diwave Image Optimization\n');
  console.log(`Settings:`);
  console.log(`  AVIF quality: ${QUALITY_SETTINGS.avif}`);
  console.log(`  WebP quality: ${QUALITY_SETTINGS.webp}`);
  console.log(`  Min file size: ${MIN_SIZE_KB}KB\n`);

  const imagesDir = path.join(__dirname, '..', 'public', 'images');

  console.log(`üìÅ Scanning: ${imagesDir}\n`);

  const images = await findImages(imagesDir);
  stats.total = images.length;

  console.log(`Found ${images.length} images\n`);
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n');

  // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ (–ø–æ 5 –æ–¥–Ω–æ—á–∞—Å–Ω–æ)
  const BATCH_SIZE = 5;
  for (let i = 0; i < images.length; i += BATCH_SIZE) {
    const batch = images.slice(i, i + BATCH_SIZE);
    await Promise.all(batch.map(optimizeImage));
  }

  console.log('\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  console.log('\nüìä Statistics:\n');
  console.log(`  Total images:     ${stats.total}`);
  console.log(`  Optimized:        ${stats.optimized}`);
  console.log(`  Skipped:          ${stats.skipped}`);
  console.log(`  Errors:           ${stats.errors}`);
  console.log(`  Space saved:      ${(stats.savedBytes / 1024 / 1024).toFixed(2)} MB`);

  if (stats.savedBytes > 0) {
    const avgReduction = ((stats.savedBytes / stats.optimized / 1024)).toFixed(0);
    console.log(`  Avg reduction:    ${avgReduction} KB per image`);
  }

  console.log('\n‚úÖ Done!\n');
  console.log('üí° SmartImage component –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ AVIF/WebP –≤–µ—Ä—Å—ñ—ó.\n');
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ
main().catch(err => {
  console.error('Fatal error:', err);
  process.exit(1);
});
